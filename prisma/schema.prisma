datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageUrl       String  @db.Text
  externalUserId String  @unique
  bio            String? @db.Text
  organizationId String? // Added organizationId field

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  organization Organization? @relation(fields: [organizationId], references: [id])
tournaments Tournament[]
  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?

  @@index([organizationId])
}

model Organization {
  id            String    @id @default(uuid())
  name          String
  description   String
  imageUrl      String?   @db.Text
  email         String?   @unique
  location      String?
  foundingDate  DateTime?
  contactPerson String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  User       User[]
  Tournament Tournament[]
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  players        User[] // Assuming a team can have multiple players
  tournaments    Tournament[] // Assuming a team can participate in multiple tournaments
  TeamTournament TeamTournament[]
}

model Tournament {
  id             String        @id @default(uuid())
  title          String
  description    String
  organization   Organization? @relation(fields: [organizationId], references: [id]) // Association with Organization
  startDate      DateTime
  endDate        DateTime
  rules          String
  gameName       String
  thumbnailUrl   String?
  organizationId String?
User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams          Team[] // A tournament can have multiple teams
  TeamTournament TeamTournament[]
}

// New model to represent the many-to-many relationship between Team and Tournament
model TeamTournament {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String

  @@unique([teamId, tournamentId])
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}